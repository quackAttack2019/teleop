package main.java.org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorController;
import com.qualcomm.robotcore.hardware.Servo;

@TeleOp(name = "Main_Thingy2.0", group = "Comp")
public class Main_Thing extends LinearOpMode {
    DcMotor Armhigh;
    DcMotor Armlow1;
    CRServo Collect;
    DcMotor maalit;
    DcMotor leftFMotor;
    DcMotor rightFMotor;
    DcMotor leftBMotor;
    DcMotor rightBMotor;
    DcMotor Armlow;
    DcMotor collect;
    float arm_speed = (float) 0.5;
    double leftFPower, rightFPower,leftBPower, rightBPower, xValue, yValue, righty, rightx,armPower;
    double mv = 0.7;
    double trn = 0.7;
    Servo P;
    protected double thresh = 0.01;
    private Thread t;
    private String threadName = "haha";



    //here we define all the methods we need.
    // we wrote the code like this so that it's more readable and organized

    //public void drive_straight(float current, float target){

    //}


    @Override
    public void runOpMode() throws InterruptedException {
        leftFMotor = hardwareMap.dcMotor.get("FL");
        rightFMotor = hardwareMap.dcMotor.get("FR");
        leftBMotor = hardwareMap.dcMotor.get("BL");
        rightBMotor = hardwareMap.dcMotor.get("BR");
        Armlow = hardwareMap.dcMotor.get("AB");
        Armhigh = hardwareMap.dcMotor.get("AH");
        maalit = hardwareMap.dcMotor.get("M");
        collect = hardwareMap.dcMotor.get("COLL");
        P = hardwareMap.servo.get("P");
        maalit.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        maalit.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        Armhigh.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        Armhigh.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        teleop robot = new teleop(leftBMotor, rightBMotor, leftFMotor, rightFMotor, Armlow, Armhigh, maalit, collect);
        leftFMotor.setDirection(DcMotor.Direction.REVERSE);
        leftBMotor.setDirection(DcMotor.Direction.REVERSE);
        Armlow.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        Armhigh.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        telemetry.addData("Mode", "waiting");
        telemetry.update();
        gamepad1.setJoystickDeadzone((float) thresh);

        // wait for start button.
        waitForStart();
        while (opModeIsActive()) {
            //moving all the motors that are supposed to be move
            if (gamepad1.left_bumper){
                mv = 1;
            }
            else{
                mv = 0.7;
            }
            if (gamepad1.right_bumper){
                trn = 1;
            }
            else{
                trn = 0.7;
            }
            robot.drive(-gamepad1.left_stick_y * mv, -gamepad1.right_stick_x * trn, gamepad1.left_stick_x);
            robot.move_Tlia(gamepad2.left_trigger , gamepad2.right_trigger);
            robot.move_armhigh(gamepad2.right_stick_y * 0.8);
            robot.move_armlow(gamepad2.left_stick_y*0.8);
            robot.move_collect(gamepad2.left_bumper , gamepad2.right_bumper );
            Armhigh.setPower(0);
            if(gamepad2.a) {
                this.P.setPosition(1);
            }
            else if(gamepad2.b){
                this.P.setPosition(0);
            }
            else if(gamepad2.x){
                this.P.setPosition(0.2);
            }

            telemetry.addData("servo", P.getPosition());
            telemetry.addData("Mode", "running");
            telemetry.addData("AH speed: ", gamepad2.right_stick_y * 0.65);
            telemetry.addData("AH encoder data: ", Armhigh.getCurrentPosition());
            telemetry.addData("mac", leftBMotor.getCurrentPosition());
            telemetry.update();
            idle();
        }
    }
}
